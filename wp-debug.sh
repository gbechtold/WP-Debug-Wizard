#!/bin/bash

# WP Debug Wizard üßô‚Äç‚ôÇÔ∏è
# A magical WordPress debugging experience
# Author: Generated by Claude AI
# License: MIT

set -e  # Exit on error
set -u  # Exit on undefined variable

# Pretty console output functions
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'
MAGICAL_DUST="‚ú®"

log_info() {
    echo -e "${BLUE}${MAGICAL_DUST} INFO: $1${NC}"
}

log_success() {
    echo -e "${GREEN}${MAGICAL_DUST} SUCCESS: $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è WARNING: $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå ERROR: $1${NC}"
}

# Check required dependencies
check_dependencies() {
    local deps=("curl" "jq" "zip" "mysql" "ssh")
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            log_error "Missing dependency: $dep"
            log_info "Please install missing dependencies using brew install $dep"
            exit 1
        fi
    done
}

# Load configuration
load_config() {
    if [ ! -f ".env" ]; then
        log_error "No .env file found!"
        log_info "Creating sample .env file..."
        cat > .env << EOL
ANTHROPIC_API_KEY=your_key_here
SITE_URL=https://your-wordpress-site.com
REMOTE_USER=your-ssh-user
REMOTE_HOST=your-ssh-host
REMOTE_PATH=/path/to/wordpress
DB_NAME=wordpress_db
DB_USER=db_user
DB_PASSWORD=db_password
BACKUP_PATH=./backups
EOL
        log_info "Please configure .env file with your settings"
        exit 1
    fi
    
    source .env
    export $(cut -d= -f1 .env)
}

# Create backup directory structure
setup_backup_dir() {
    local timestamp=$(date +%Y%m%d_%H%M%S)
    BACKUP_DIR="${BACKUP_PATH}/${timestamp}"
    mkdir -p "${BACKUP_DIR}"
    log_success "Created backup directory: ${BACKUP_DIR}"
}

# Backup remote files
backup_files() {
    log_info "Starting file backup..."
    
    ssh "${REMOTE_USER}@${REMOTE_HOST}" "cd ${REMOTE_PATH} && tar czf - ." > "${BACKUP_DIR}/files.tar.gz"
    
    if [ $? -eq 0 ]; then
        log_success "Files backed up successfully!"
    else
        log_error "File backup failed!"
        exit 1
    fi
}

# Backup database
backup_database() {
    log_info "Starting database backup..."
    
    ssh "${REMOTE_USER}@${REMOTE_HOST}" \
        "mysqldump --no-tablespaces -u${DB_USER} -p${DB_PASSWORD} ${DB_NAME}" > "${BACKUP_DIR}/database.sql"
    
    if [ $? -eq 0 ]; then
        log_success "Database backed up successfully!"
    else
        log_error "Database backup failed!"
        exit 1
    fi
}

# Check WordPress health
check_wp_health() {
    log_info "Checking WordPress health..."
    
    # Frontend check
    local status_code=$(curl -s -o /dev/null -w "%{http_code}" "${SITE_URL}")
    if [ "$status_code" -eq 200 ]; then
        log_success "Frontend is responding normally (HTTP 200)"
    else
        log_warning "Frontend returned HTTP ${status_code}"
    fi
    
    # Backend check
    local admin_url="${SITE_URL}/wp-admin/"
    local admin_status=$(curl -s -o /dev/null -w "%{http_code}" "${admin_url}")
    if [ "$admin_status" -eq 200 ] || [ "$admin_status" -eq 302 ]; then
        log_success "Backend is accessible"
    else
        log_warning "Backend might be having issues (HTTP ${admin_status})"
    fi
    
    # Get plugin list
    log_info "Retrieving plugin list..."
    ssh "${REMOTE_USER}@${REMOTE_HOST}" "cd ${REMOTE_PATH} && wp plugin list --format=json" > "${BACKUP_DIR}/plugins.json"
    
    # Parse and display active plugins
    if [ -f "${BACKUP_DIR}/plugins.json" ]; then
        echo "Active plugins:"
        jq -r '.[] | select(.status=="active") | "- \(.name) (v\(.version))"' "${BACKUP_DIR}/plugins.json"
    fi
}

# Enable debug mode
enable_debug_mode() {
    log_info "Enabling WordPress debug mode..."
    
    local debug_config="define('WP_DEBUG', true);
define('WP_DEBUG_LOG', true);
define('WP_DEBUG_DISPLAY', false);"
    
    ssh "${REMOTE_USER}@${REMOTE_HOST}" "cd ${REMOTE_PATH} && \
        sed -i.bak '/WP_DEBUG/d' wp-config.php && \
        echo \"${debug_config}\" >> wp-config.php"
    
    log_success "Debug mode enabled!"
}

# Monitor debug log
monitor_debug_log() {
    log_info "Starting debug log monitoring..."
    log_info "Press Ctrl+C to stop monitoring"
    
    ssh "${REMOTE_USER}@${REMOTE_HOST}" "tail -f ${REMOTE_PATH}/wp-content/debug.log"
}

# Main execution
main() {
    log_info "üßô‚Äç‚ôÇÔ∏è Starting WP Debug Wizard..."
    
    check_dependencies
    load_config
    setup_backup_dir
    backup_files
    backup_database
    check_wp_health
    enable_debug_mode
    monitor_debug_log
}

# Run the script
main "$@"